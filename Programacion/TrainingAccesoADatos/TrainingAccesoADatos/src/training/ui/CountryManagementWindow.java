/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package training.ui;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import training.data_access.DataAccessManager;
import training.objects.Country;

/**
 * Clase de la UI encargada de hacer el mantenimiento de la entidad {@link Country}.
 * @author jsanm
 */
public class CountryManagementWindow extends javax.swing.JFrame {

    private final static SimpleDateFormat LAST_UPDATED_STRING_FORMAT = new SimpleDateFormat("dd/MM/yyyy");
    /**
     * Creates new form CountryManagementWindow
     */
    public CountryManagementWindow() throws SQLException{
        //invocamos el método que completa la vista del formulario (se auto-implementa
        //con las acciones que realizamos en tiempo de diseño)        
        initComponents();
        
        //cargamos todos los datos en la tabla
        loadData();
        
        //no permitimos editar el contenido de la tabla
        this.countryList.setCellSelectionEnabled(false);
        this.countryList.setRowSelectionAllowed(false);
        this.countryList.setColumnSelectionAllowed(false);
        
        //programamos que, cuando se seleccione una fila, se autocomplete el 
        //text box para permitir al usuario cambiar el nombre del país
        this.countryList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if(countryList.getSelectedRow()!=-1){
                    String selectedCountry = (String)countryList.getModel().getValueAt(countryList.getSelectedRow(), 1);
                    countryNameTextField.setText(selectedCountry);
                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        countryList = new javax.swing.JTable();
        cleanButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        slavePanel = new javax.swing.JPanel();
        paisLabel = new javax.swing.JLabel();
        countryNameTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestión de Países");
        setName("mainFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        countryList.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(countryList);

        cleanButton.setText("Limpiar");
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanButtonActionPerformed(evt);
            }
        });

        insertButton.setText("Insertar");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Eliminar");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Actualizar");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        paisLabel.setText("País:");

        javax.swing.GroupLayout slavePanelLayout = new javax.swing.GroupLayout(slavePanel);
        slavePanel.setLayout(slavePanelLayout);
        slavePanelLayout.setHorizontalGroup(
            slavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paisLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryNameTextField)
                .addContainerGap())
        );
        slavePanelLayout.setVerticalGroup(
            slavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slavePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(slavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paisLabel)
                    .addComponent(countryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cleanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(slavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cleanButton)
                    .addComponent(insertButton)
                    .addComponent(deleteButton)
                    .addComponent(updateButton))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
        this.countryNameTextField.setText(null);
    }//GEN-LAST:event_cleanButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(this.countryList.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un país primero de la lista","Información",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        Short selectedCountryId = (Short)this.countryList.getModel().getValueAt(this.countryList.getSelectedRow(), 0);
        
        try{
            DataAccessManager.getInstance().deleteCountry(selectedCountryId);
            JOptionPane.showMessageDialog(this, "Registro eliminado con éxito","Información",JOptionPane.INFORMATION_MESSAGE);
            this.loadData();
            countryNameTextField.setText(null);
        }
        catch(Exception sqe){
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al realizar la operación en la base de datos","Error",JOptionPane.ERROR_MESSAGE);
            System.err.println(sqe);
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        
        if(this.countryList.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un país primero de la lista","Información",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        Short selectedId = (Short)this.countryList.getModel().getValueAt(this.countryList.getSelectedRow(), 0);
        String newValue = this.countryNameTextField.getText();
        
               
        try{
            DataAccessManager.getInstance().updateCountry(newValue, selectedId);
            JOptionPane.showMessageDialog(this, "Registro actualizado con éxito","Información",JOptionPane.INFORMATION_MESSAGE);
            this.loadData();
            countryNameTextField.setText(null);
        }
        catch(Exception sqe){
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al realizar la operación en la base de datos","Error",JOptionPane.ERROR_MESSAGE);
            System.err.println(sqe);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        
        String newCountryName = this.countryNameTextField.getText();
        
        if(newCountryName==null || newCountryName.trim().length()==0){
            JOptionPane.showMessageDialog(this, "Debe escribir un país primero","Información",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
               
        try{
            Country newCountry = DataAccessManager.getInstance().insertCountry(newCountryName);
            JOptionPane.showMessageDialog(this, "Registro insertado con éxito con id: " + newCountry.getCountryId(),"Información",JOptionPane.INFORMATION_MESSAGE);
            this.loadData();
            countryNameTextField.setText(null);
        }        
        catch(Exception sqe){
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al realizar la operación en la base de datos","Error",JOptionPane.ERROR_MESSAGE);
            System.err.println(sqe);
        }
    }//GEN-LAST:event_insertButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cleanButton;
    private javax.swing.JTable countryList;
    private javax.swing.JTextField countryNameTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel paisLabel;
    private javax.swing.JPanel slavePanel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Inicializa los datos de países en el componente <code>JTable</code> de la ventana.
     * Se invoca de forma privada al crear la ventana.
     * @throws SQLException Si ocurre algún error en la carga de datos
     */
    private void loadData() throws SQLException {
        
        //carga de datos en memoria
        List<Country> allCountries = DataAccessManager.getInstance().loadAllCountries();
        
        //preparación del Data Model con las dos columnas a mostrar (no permiten edición)
        DefaultTableModel dtm = new NotEditableTableModel();
        dtm.addColumn("Id");
        dtm.addColumn("País");
        dtm.addColumn("Último cambio");
        
        //recorremos los países cargados en memoria
        for(int i=0; i<allCountries.size(); i++){
            //una fila por país
            Object[] dtmRow = new Object[3];
            Country country = allCountries.get(i);
            
            //las dos columnas de la fila, son dos propiedades del país, respectivamente
            dtmRow[0] = country.getCountryId();
            dtmRow[1] = country.getCountryName();
            dtmRow[2] = LAST_UPDATED_STRING_FORMAT.format(country.getLastUpdate());
            
            //añadimos la fila al modelo de datos 
            dtm.addRow(dtmRow);
        }
        
        //asociamos el modelo de datos creado a la JTable de la ventana, para hacer los datos visibles
        this.countryList.setModel(dtm);
        
        
        
    }
}
