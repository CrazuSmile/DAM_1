/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto_final.ui;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import proyecto_final.objects.Ability;
import proyecto_final.data_access.DataAccessManager;
import proyecto_final.objects.Pokemon;

/**
 *
 * @author jojos
 */
public class UserInterfaceFrame extends javax.swing.JFrame {

    /**
     * Creates new form UserInterfaceFrame
     *
     * @throws java.sql.SQLException
     */
    public UserInterfaceFrame() throws SQLException {
        initComponents();

        loadData();

        this.mostrarPokemon.setCellSelectionEnabled(false);
        this.mostrarPokemon.setRowSelectionAllowed(false);
        this.mostrarPokemon.setColumnSelectionAllowed(false);

        this.mostrarPokemon.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (mostrarPokemon.getSelectedRow() != -1) {
                    String selectedPokemon = (String) mostrarPokemon.getModel().getValueAt(mostrarPokemon.getSelectedRow(), 1);
                    pokemonNameField.setText(selectedPokemon);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        pokemonNameField = new javax.swing.JTextField();
        loadAll = new javax.swing.JButton();
        loadOne = new javax.swing.JButton();
        insertAbility = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mostrarPokemon = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prueba de Pokedex");

        jLabel1.setText("Nombre del pokemon");

        pokemonNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pokemonNameFieldActionPerformed(evt);
            }
        });

        loadAll.setText("Reiniciar");
        loadAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTestField(evt);
            }
        });

        loadOne.setText("Buscar");
        loadOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pokemonNameFieldActionPerformed(evt);
            }
        });

        insertAbility.setText("Crear");
        insertAbility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertAbilityActionPerformed(evt);
            }
        });

        delete.setText("Borrar");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        mostrarPokemon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(mostrarPokemon);

        jLabel2.setText("Pokedex: Pokemon-Abilidad");

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePokemonNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(168, 168, 168))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(loadAll)
                            .addGap(18, 18, 18)
                            .addComponent(insertAbility)
                            .addGap(18, 18, 18)
                            .addComponent(loadOne)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1)
                            .addGap(18, 18, 18)
                            .addComponent(delete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(pokemonNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jLabel2)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pokemonNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadOne)
                    .addComponent(insertAbility)
                    .addComponent(delete)
                    .addComponent(loadAll)
                    .addComponent(jButton1))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pokemonNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pokemonNameFieldActionPerformed
        searchPokemon();
    }//GEN-LAST:event_pokemonNameFieldActionPerformed

    private void limpiarTestField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTestField
        // TODO add your handling code here:
        try {
            pokemonNameField.setText("");
            loadData();
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error resetting data from database.", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_limpiarTestField

    private void insertAbilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAbilityActionPerformed
        // TODO add your handling code here:

        insertPokAbil();
        try {
            String pokemonName = pokemonNameField.getText().trim();

            if (pokemonName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Pokemon name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("Pokemon Name: " + pokemonName);  // Debugging line

            Pokemon newPokemon = new Pokemon(pokemonName);

            DataAccessManager dam = DataAccessManager.getInstance();

            System.out.println("Before Insert Pokemon");  // Debugging line
            int pokemonId = dam.insertPokemon(newPokemon);
            System.out.println("Pokemon ID: " + pokemonId);  // Debugging line

            JOptionPane.showMessageDialog(this, "Pokemon and ability added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadData();  // Refresh the table data
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error adding Pokemon or ability: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_insertAbilityActionPerformed

    private void updatePokemonNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePokemonNameActionPerformed
        // TODO add your handling code here:
        String oldName = pokemonNameField.getText();
        if (oldName == null || oldName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the current name of the Pokémon", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String newName = promptForNewName("Pokémon", oldName);
        if (newName == null || newName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "New name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            DataAccessManager.getInstance().updatePokemonName(oldName, newName);
            JOptionPane.showMessageDialog(this, "Pokémon name updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadData();  // Refresh the table data
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error updating Pokémon name: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_updatePokemonNameActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        try {
            String pokemonName = JOptionPane.showInputDialog(this, "Enter the name of the Pokémon to delete:", "Delete Pokémon", JOptionPane.PLAIN_MESSAGE);
            if (pokemonName == null || pokemonName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Pokémon name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DataAccessManager.getInstance().deletePokemonByName(pokemonName);

            JOptionPane.showMessageDialog(this, "Pokémon deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadData();  // Refresh the table data

        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error deleting Pokémon: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UserInterfaceFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JButton insertAbility;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadAll;
    private javax.swing.JButton loadOne;
    private javax.swing.JTable mostrarPokemon;
    private javax.swing.JTextField pokemonNameField;
    // End of variables declaration//GEN-END:variables

    private void loadData() throws SQLException {
        List<Pokemon> allPokemons = DataAccessManager.getInstance().loadAllPokemon();

        DefaultTableModel dtmP = new NotEditableTableModel();

        dtmP.addColumn("ID pokemon");
        dtmP.addColumn("Pokemon");

        for (int i = 0; i < allPokemons.size(); i++) {
            Object[] dtmRowP = new Object[2];
            Pokemon pokemons = allPokemons.get(i);

            dtmRowP[0] = pokemons.getPokID();
            dtmRowP[1] = pokemons.getPokName();

            dtmP.addRow(dtmRowP);
        }

        this.mostrarPokemon.setModel(dtmP);
    }

    private void searchPokemon() {
        String searchName = pokemonNameField.getText().trim();
        if (searchName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Pokémon name to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            List<Pokemon> filteredPokemons = DataAccessManager.getInstance().loadPokemonContaining("%" + searchName + "%");

            DefaultTableModel dtmP = new NotEditableTableModel();
            dtmP.addColumn("ID pokemon");
            dtmP.addColumn("Pokemon");
            dtmP.addColumn("Abilities");

            for (Pokemon pokemon : filteredPokemons) {
                Object[] dtmRowP = new Object[3];
                dtmRowP[0] = pokemon.getPokID();
                dtmRowP[1] = pokemon.getPokName();
                StringBuilder abilities = new StringBuilder();
                for (Ability ability : pokemon.getAbility()) {
                    if (abilities.length() > 0) {
                        abilities.append(", ");
                    }
                    abilities.append(ability.getAbilName());
                }
                dtmRowP[2] = abilities.toString();
                dtmP.addRow(dtmRowP);
            }

            mostrarPokemon.setModel(dtmP);
        } catch (SQLException ex) {
            Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error retrieving data from database.", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String promptForNewName(String entityType, String oldName) {
        return JOptionPane.showInputDialog(this, "Enter new name for the " + entityType + " '" + oldName + "':", "Update " + entityType, JOptionPane.PLAIN_MESSAGE);
    }

    private void insertPokAbil() {

    }
}
