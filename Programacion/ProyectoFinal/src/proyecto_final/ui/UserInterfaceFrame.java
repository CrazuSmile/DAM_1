/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto_final.ui;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import proyecto_final.data_access.AbilityDAO;
import proyecto_final.objects.Ability;
import proyecto_final.data_access.DataAccessManager;
import proyecto_final.data_access.PokemonDAO;
import proyecto_final.objects.Pokemon;

/**
 *
 * @author jojos
 */
public class UserInterfaceFrame extends javax.swing.JFrame {

    /**
     * Creates new form UserInterfaceFrame
     *
     * @throws java.sql.SQLException
     */
    public UserInterfaceFrame() throws SQLException {
        initComponents();

        loadData();

        this.mostrarPokemon.setCellSelectionEnabled(false);
        this.mostrarPokemon.setRowSelectionAllowed(false);
        this.mostrarPokemon.setColumnSelectionAllowed(false);

        this.mostrarPokemon.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (mostrarPokemon.getSelectedRow() != -1) {
                    String selectedPokemon = (String) mostrarPokemon.getModel().getValueAt(mostrarPokemon.getSelectedRow(), 1);
                    buscarPorNombre.setText(selectedPokemon);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        buscarPorNombre = new javax.swing.JTextField();
        loadAll = new javax.swing.JButton();
        loadOne = new javax.swing.JButton();
        insertAbility = new javax.swing.JButton();
        updateAbility = new javax.swing.JButton();
        deleteAbility = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mostrarPokemon = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prueba de Pokedex");

        jLabel1.setText("Nombre del pokemon");

        buscarPorNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorNombreActionPerformed(evt);
            }
        });

        loadAll.setText("Reiniciar");
        loadAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTestField(evt);
            }
        });

        loadOne.setText("Buscar");

        insertAbility.setText("Crear");
        insertAbility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertAbilityActionPerformed(evt);
            }
        });

        updateAbility.setText("Actualizar");

        deleteAbility.setText("Borrar");

        mostrarPokemon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(mostrarPokemon);

        jLabel2.setText("Pokedex: Pokemon-Abilidad");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(loadAll)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(buscarPorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(insertAbility)
                                .addGap(18, 18, 18)
                                .addComponent(loadOne)
                                .addGap(18, 18, 18)
                                .addComponent(updateAbility)
                                .addGap(18, 18, 18)
                                .addComponent(deleteAbility)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscarPorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadOne)
                    .addComponent(insertAbility)
                    .addComponent(updateAbility)
                    .addComponent(deleteAbility)
                    .addComponent(loadAll))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarPorNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarPorNombreActionPerformed

    private void limpiarTestField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTestField
        // TODO add your handling code here:

    }//GEN-LAST:event_limpiarTestField

    private void insertAbilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAbilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insertAbilityActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UserInterfaceFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(UserInterfaceFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField buscarPorNombre;
    private javax.swing.JButton deleteAbility;
    private javax.swing.JButton insertAbility;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadAll;
    private javax.swing.JButton loadOne;
    private javax.swing.JTable mostrarPokemon;
    private javax.swing.JButton updateAbility;
    // End of variables declaration//GEN-END:variables

    private void loadData() throws SQLException {
        List<Pokemon> allPokemons = DataAccessManager.getInstance().loadAllPokemonWithAbilities();

        DefaultTableModel dtmP = new NotEditableTableModel();

        dtmP.addColumn("ID pokemon");
        dtmP.addColumn("Pokemon");
        dtmP.addColumn("Abilities");

        for (int i = 0; i < allPokemons.size(); i++) {
            Object[] dtmRowP = new Object[3];
            Pokemon pokemons = allPokemons.get(i);

            dtmRowP[0] = pokemons.getPokID();
            dtmRowP[1] = pokemons.getPokName();
            StringBuilder abilities = new StringBuilder();
            for (Ability ability : pokemons.getAbility()) {
                if (abilities.length() > 0) {
                    abilities.append(", ");
                }
                abilities.append(ability.getAbilName());
            }
            dtmRowP[2] = abilities.toString();
            dtmP.addRow(dtmRowP);
        }

        this.mostrarPokemon.setModel(dtmP);
    }
}
